---
layout: post
title: "나의 첫 리팩토링 도전기[1] - 폴더 구조부터 정리하자!"
date: 2024-09-07 13:16:03 +0900
categories: jekyll update
---

### 🩷나의 첫 리팩토링 도전기 소개합니다

안녕하세요, 개발을 사랑하는 프론트엔드 개발자 지망생 소팡입니다.<br/>
저는 최근 Geekchic쇼핑몰 프로젝트를 만들었는데요. _( ~~쇼핑몰 이라고 하기엔 약간의 부족함이 있지만~~ )_ **프로젝트를 하면서 아쉬운점이 너무 많아져서 리팩토링을 하기로 마음먹었습니다.** 이 포스팅은 v2.Geekchic을 리팩토링 하면서 느낀점과 배운 교훈들을 공유하고자 합니다.<br/>

<img src='/images/2-8-bokuto4.png' alt='시작하기' style="margin: 20px 0"/>

이 글이 여러분의 개발 여정에도 도움이 되시길 바라며.
리팩토링 과정에서 겪은 어려움과 깨달음을 재미있게 전달할테니 많이~ 끝까지 읽어주세요@\_@
<br/>
<br/>


### 🩷리팩토링의 시작: 왜 필요했을까?

개발을 하다 보면, 처음엔 "이거면 충분하겠지"라고 생각했던 구조가 시간이 지날수록 무너져 내리는 경험을 하신 적 있으신가요? 저도 그랬습니다. V1에서는 페이지 UI에만 몰두하면서 큰 그림을 보지 못했던것 같습니다. 하나의 페이지에 필요한 데이터, UI, 컴포넌트만 생각해서 구현을 했었던 거죠.

특히 Firebase와 TypeScript를 처음 다뤄보면서 여러 시행착오를 겪었습니다. 기본적인 데이터 타입은 잡아냈지만, 보다 세밀한 타입 정의는 하지 않았고, 공통 컴포넌트 구현도 놓쳤습니다. 비슷한 코드가 계속 반복되는 걸 알면서도, 일정이 바빠서 눈감았던 부분이었습니다.

데이터베이스 설계도 처음이라 많이 미숙했습니다. 장바구니, 메시지, 판매 목록, 구매 내역 등을 전부 `userData` 안에서 해결하려다 보니, 데이터 업데이트가 너무 어려웠어요. 그 과정에서 `useQuery`, `useMutation`, 그리고 `Recoil` 같은 라이브러리들을 설치해놓고 제대로 사용하지 못했던 것도 리팩토링을 결심하게 된 큰 이유였습니다.
<br/>
<br/>

### 🩷자료 수집과 고민 과정: 폴더 구조는 이렇게 바뀌었어요!

리팩토링을 결심한 후, 저는 Medium과 여러 개발자 블로그를 통해 자료를 찾기 시작했습니다. 처음에는 Atomic Design처럼 거창한 방법을 도입하려 했지만, 처음부터 욕심내기 보다는 차근차근 제 프로젝트에 맞는 방법을 찾아가기 위해 고민했습니다.

결국 핵심은 완벽함이 아니고 단순함에 있다고 생각하게 됐습니다. 유지보수하기 쉬운 폴더 구조와 컴포넌트 재사용에 초점을 맞추기로 했습니다.
<br/>
<br/>

### 🩷V1 vs V2 폴더 구조 비교

-  **v1 폴더구조** <br/>

v1에서는 페이지 컴포넌트를 `pages` 폴더에, 컴포넌트를 `components` 폴더에 넣어 관리했습니다. 컴포넌트가 점점 많아지면서 컴포넌트 안에도 페이지별 폴더를 두어 페이지에서 사용하는 컴포넌트를 관리했습니다.

이렇게 되니 중복 사용되는 공통 컴포넌트와 단 한 번만 사용하는 컴포넌트의 구분이 어려워졌고, 각 컴포넌트가 어디에 포함되는지 알아보는 데 시간도 꽤 걸렸습니다.

```tsx
- pages
  -- Home.tsx
  -- usedHome.tsx
- components
  -- common
	  -- Header.tsx
	  -- Button.tsx
	  -- SearchHeader.tsx
  -- usedHome
	  --UsedSearchBar.tsx
```
<br/>

-  **v2 폴더구조**

그래서 V2에서는 페이지별로 폴더를 생성하고, 그 안에 `index.ts` 파일을 만들어 해당 페이지와 관련된 모든 컴포넌트를 내보내도록 했습니다. 이렇게 하니 폴더 구조가 더 명확해지고, 유지보수도 훨씬 수월해져서 사용하기가 편했습니다.
<img src='/images/0907_folder.png' alt='시작하기' style="margin: 20px 0"/>
<br/>

이 방식의 큰 장점은 폴더 구조나 파일명을 변경해도 `index.ts` 파일만 수정하면 되기 때문에, 외부에서 `import`하는 코드들은 영향을 받지 않는다는 것입니다. 처음에 익숙하지 않아서 번거롭다고 느꼈지만, import 파일이 많아질수록 유지 보수성이 굉장히 편해졌다고 느끼게 됐습니다.

```tsx
// usedHome > index.tsx
// usedHome폴더 안의 여러 컴포넌트를 하나로 묶어서 UsedHome.tsx컴포넌트에서 사용할 것
import { UsedHome } from "./UsedHome";
import { SearchBar } from "./SearchBar";
import { SearchList } from "./SearchList";
import { Skeleton } from "./Skeleton";

// import 할 때 export한 이름과 똑같은 이름으로 사용해야 파일이 불러와짐
export { SearchBar, SearchList, Skeleton };

// usedHome폴더를 import할 때 기본적으로 내보내지는 파일이다.
// usedHome폴더 경로를 작성해두고 이름을 변경해도 UsedHome컴포넌트가 불러와진다.
export default UsedHome;
```
<br/>

### 🩷컴포넌트 추상화: BasicButton의 탄생

리팩토링을 하면서 가장 중요하게 생각한 부분 중 하나가 컴포넌트의 추상화였습니다. 특히 버튼 같은 경우는 여러 페이지에서 반복적으로 사용되기 때문에, 하나의 `BasicButton` 컴포넌트를 만들어 모든 페이지에서 일관되게 사용할 수 있도록 했습니다.

```tsx
interface BasicButtonProps {
  onClickFunc: () => void;
  text: string;
  bg: string;
  width?: string;
}

export const BasicButton = ({
  onClickFunc,
  text,
  bg,
  width,
}: BasicButtonProps) => {
  return (
    <button
      onClick={onClickFunc}
      className={`${
        !width ? "w-full" : `${width}`
      } h-[50px] mb-2 border rounded-md text-white ${bg}`}
    >
      {text}
    </button>
  );
};
```

이렇게 컴포넌트를 추상화하니까 버튼의 디자인을 일관되게 유지할 수 있고, 코드 중복도 줄일 수 있었습니다. 그리고 유지보수가 훨씬 쉬워졌습니다. 컴포넌트를 만들고 나니, "아, 여기에 이 버튼 써야겠네!"라는 생각이 들면서 컴포넌트 구조에 맞게 버튼 내용을 작성하고 있었습니다.

UI를 작성할 때, 혹은 API호출 함수를 만들 때도 추상화 할 수 있는 것들을 고민하고 있는 저를 발견했습니다. v1의 코드에서 한발 더 나아가 추상화를 해보려는 시도를 더욱 더 많이 할 것 같습니다. 그래서 앞으로 더 많은 컴포넌트가 생성될 예정입니다!
<br/>
<br/>

### 🩷다시 짜다, 나아지다: v1의 부족함을 메우는 리팩토링의 시작

**리팩토링은 단순히 코드를 다시 쓰는 것이 아니라, 더 나은 구조와 효율성을 위해 끊임없이 고민하고 실험하는 과정이라고 생각합니다.** 아직 많은 경험은 없지만 끊임없는 자료 수집과 기술 블로그를 통해 여러 방법들을 만나 볼 생각입니다.

그래서 v2에서는 다양한 시행착오와 만날 생각에 벌써부터 설레고 있습니다. 이전보다 더 나아진 코드를 보면서 뿌듯한 느낌이 들고 코드에 더 애착이 갑니다. 이제 시작입니다. 더 효율적으로, 유지보수가 쉬운 프로젝트가 되어 가겠습니다. 조금씩 다듬어지고 v2.GeekChic을 잘 봐주세요!
<br/>
<br/>

---

<br/>

### reference

- [medium react컴포넌트 폴더구조](https://medium.com/styled-components/component-folder-pattern-ee42df37ec68)
- [medium Atomic디자인](https://eyderacm.medium.com/how-to-improve-your-component-folder-structure-with-atomic-design-2bf6a4767ac8)
- [tstory 프로젝트 폴더구조](https://bttrthn-ystrdy.tistory.com/91)
- [medium react 폴더구조는 어떻게?](https://medium.com/@jnkthr/how-to-design-the-structure-of-folders-and-components-of-your-react-applications-dd1d37f10a10)
- [번역_좋은리팩토링 나쁜 리팩토링 ](https://ykss.netlify.app/translation/good_refactoring_vs_bad_refactoring/?utm_source=substack&utm_medium=email)
- [소팡 노션 - 폴더의 여러 파일들 index.ts로 한번에 내보내기 ](https://www.notion.so/index-ts-eba39d96da3c43e7b2de59e828b0ad4b?pvs=21)
- [소팡 노션 - 프로젝트 폴더 생성 및 관리](https://www.notion.so/df30729cb9654e0cb42bc5b5611101c6?pvs=21)
