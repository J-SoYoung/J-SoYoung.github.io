---
layout: post
title: "코드는 자란다: v2로 업로드 페이지 진화기"
date: 2024-09-11 13:16:03 +0900
categories: jekyll update
---

### 🩷v2프로젝트의 시작

Geekchic 프로젝트의 V1을 진행하면서 느꼈던 한 가지는 **효율적인 데이터 처리의 부재**였습니다. 매번 새로운 데이터를 처리할 때마다 중복된 코드들이 쌓여갔고, 상태 관리는 여기저기 흩어져 있어 유지보수가 어려웠습니다. 로딩이나 에러 처리도 부족해서 사용자 경험이 떨어졌습니다.. 그래서 **v2에는 코드 구조와 데이터 처리 방식을 개선해야겠다는 필요성**을 느끼게 되었습니다.

<img src='/images/2-10-to&hi.png' alt='시작하기' style="margin: 20px 0"/>

이 포스팅에서는 V1에서 V2로 업그레이드하면서 적용한 중고 제품 업로드 페이지의 주요 개선 사항을 소개하고, s그 과정에서 고민한 점과 배운 점을 공유하고자 합니다. 특히, V1과 V2의 데이터 처리, 입력 검증, 컴포넌트 분리에 대한 변화를 중심으로 설명하겠습니다.
<br/>
<br/>

### 🩷v1에서 v2의 업로드 페이지 개선

**⭕ V1에서 겪었던 문제점**<br/>

V1의 중고 제품 업로드 페이지는 각 입력 필드마다 개별적인 상태 관리를 했습니다. 예를 들어, 제품명, 이미지, 가격, 설명 등 각기 독립적인 상태를 유지했기 때문에 코드가 매우 비효율적이었습니다. 또한, **이미지 업로드와 미리보기 기능이 통합되어** 성능 문제가 발생하거나 예기치 않은 에러가 빈번했습니다.

- **상태 관리의 복잡성** : 각 입력 필드마다 개별적으로 상태를 관리하다 보니 코드가 길어지고 유지보수가 어려워졌습니다.
- **이미지 업로드 문제** : 이미지 미리보기와 실제 서버 업로드가 동시에 이루어지면서 에러 처리가 어려워졌고, 사용자 경험도 떨어졌습니다.
- **입력 검증 부족** : 필수 입력 값에 대한 검증 로직이 없었기 때문에, 데이터 누락으로 인한 에러가 자주 발생했습니다.<br/>
  <br/>

**⭕ V2에서의 개선 사항**<br/>

V2에서는 기존 V1의 한계점을 극복하기 위해 몇 가지 중요한 개선을 적용했습니다.

**1) 상태 관리의 효율성 개선**

V2에서는 제품 정보를 **객체로 묶어서 하나의 상태로 관리**하도록 변경했습니다. 이렇게 하면 상태 변경이 더 직관적이고 코드도 간결해집니다. 또한, 입력 필드를 공통 컴포넌트로 분리하여 재사용성을 높였습니다.

```tsx
// V1의 상태 관리 => 개별 상태관리
const [itemName, setItemName] = useState("");
const [price, setPrice] = useState("");

// V2의 상태 관리 => 객체로 한번에 상태관리
const [usedProducts, setUsedProducts] =
  useState<UsedProductType>(initialUsedProduct);
const onChangeInput = (e: React.ChangeEvent<HTMLInputElement>) => {
  const { name, value } = e.target;
  setUsedProducts({ ...usedProducts, [name]: value });
};
```

<br/>
<br/>

**2) 이미지 업로드 및 미리보기 기능 분리**

- V1에서는 **이미지 미리보기와 동시에 클라우디너리에 이미지가 업로드** 되었습니다. <br/>
  이후 클라우디 너리에 업로드 된 이미지 url을 받아 firebase에 저장하였습니다.

```tsx
const handleImageChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
  if (e.target.files) {
    const file = e.target.files[0];
    const urlFile = URL.createObjectURL(file);
    setPreviewImages((prevImages) => prevImages.concat(urlFile));

    const cloudImage = await uploadCloudImage(file);
    setUploadImages((prevImages) => prevImages.concat(cloudImage));
  }
};
```

<br/>

- V2에서는 **이미지 미리보기와 실제 업로드 기능을 분리**했습니다. <br/>
  미리보기를 먼저 제공한 후, 사용자가 확인한 이미지를 서버에 업로드하도록 했습니다. 이를 통해 불필요한 이미지가 서버에 업로드 되는 것을 막을 수 있었습니다. 또한, 이미지 업로드 시에는 `useMutation`을 사용해 로딩 상태와 에러 처리를 쉽게 구현할 수 있었습니다.

```tsx
// 이미지 컴포넌트의 미리보기 preview state에 이미지 저장 후 보여주기
const onChangeImage = async (e: React.ChangeEvent<HTMLInputElement>) => {
  if (e.target.files) {
    const file = e.target.files[0];
    const urlFile = URL.createObjectURL(file);
    setPreviewImages((prevImages) => prevImages.concat(urlFile));
    setUploadImages((prevImages) => prevImages.concat(file));
  }
};

// 업로드 페이지의 이미지 업로드 -> 미리보기 기능과 분리
const imageUploadMutation = useMutation({
  mutationFn: async (uploadImages: File[]) => {
    return uploadCloudImagesArray(uploadImages);
  }});

const usedProductUploadMutation = useMutation({
  mutationFn: async (newUsedProducts: UsedProductType) => {
    await uploadUsedProducts(newUsedProducts);
  }}, // onSuccess 생략 )

const onClickUploadUsedProducts = async () => {
 if (uploadImages) {
      imageUploadMutation.mutate(uploadImages, {
      // 이미지를 업로드가 성공하면 제품을 업로드하도록 구현
        onSuccess: (cloudImage) => {
          newUsedProducts = { ...newUsedProducts, images: cloudImage };
          usedProductUploadMutation.mutate(newUsedProducts);
        }
      }}
	  }
```

<br/>
<br/>

**3) 입력 검증 로직 추가**

필수 입력 값 검증을 통해 **입력 데이터의 완전성을 보장**하고, 검증에 실패하면 경고 메시지를 표시하는 로직을 추가하여 사용자 경험을 크게 개선했습니다.

```tsx
// 검증 함수 타입
// 기존 타입에서 유틸리티 타입인 Omit을 사용해서 특정 속성만 제거한 뒤 타입을 적용
type ValidateProductInputType = Omit<
  UsedProductType,
  "id" | "seller" | "createdAt" | "isSales" | "deliveryCharge" | "images"
>;

// 사용자 입력 검증 함수
export const validateProductData = (usedProducts: ValidateProductInputType) => {
  if (!usedProducts.productName || !usedProducts.price) {
    return false;
  }
  return true;
};
```

<br/>
<br/>

**4) 로딩 및 에러 처리 개선**

- 에러 컴포넌트 생성 및 적용 <br/>
  useMutation을 사용하여 로딩 및 에러 처리를 간소화하였습니다.
  서버 응답 상태에 따라 ( Loading, Error, Success ) 다른 컴포넌트를 렌더링하게 하여 사용자 경험을 개선하였습니다. 사용자가 에러 처리에 대한 다음 액션을 취할 수 있도록 새로고침 or 페이지 이동을 할 수 있도록 하였습니다.

```tsx
// 업로드 페이지에서 에러 컴포넌트 사용
if (usedProductUploadMutation.isError) {
  return (
    <ErrorPageReload
      content="데이터를 업로드 하는 동안 문제가 발생했습니다."
      pageName="업로드"
      linkTo="/used"
      movePage="중고 메인"
    />
  );
}

// ERror 컴포넌트
export const ErrorPageReload = ({ content, pageName, linkTo, movePage }) => {
  const navigate = useNavigate();
  return (
    <div>
      <p>{content}</p>
      <button onClick={() => window.location.reload()}>
        GeekChic {pageName} 페이지 새로고침
      </button>
      <img src={ErrorImg} alt="페이지를 새로고침 해주세요" />
      {linkTo && (
        <Link to={linkTo} className="hover:font-bold">
          {movePage}페이지 로 돌아가기
        </Link>
      )}
    </div>
  );
};
```

 <br/>
 
- 로딩 스피너 컴포넌트 생성 및 적용 <br/>
서버 업로드 상태에 따라 사용자에게 로딩 상태임을 알려주도록 하였습니다. 이로써 사용자는 데이터가 업로드 중이라는 것을 감지하여 사용자 경험이 개선되었습니다.

```tsx
// 업로드 페이지에서 로딩 스피너 컴포넌트 사용
const [isLoading, setIsLoading] = useState(false);

{
  isLoading && (
    <div className="m-auto">
      <span>Loading</span>
      <LoadingSpinner />
    </div>
  );
}

// 로딩 스피너 구현
export const LoadingSpinner = () => {
  return (
    <div className="flex justify-center items-center">
      <div className="flex space-x-4">
        <div
          className={`w-6 h-6 bg-purple-500 rounded-full animate-bounce`}
        ></div>
        <div
          className={`w-6 h-6 bg-purple-500 rounded-full animate-bounce`}
        ></div>
        <div
          className={`w-6 h-6 bg-purple-500 rounded-full animate-bounce`}
        ></div>
        <div
          className={`w-6 h-6 bg-purple-500 rounded-full animate-bounce`}
        ></div>
      </div>
    </div>
  );
};
```

<br/>
<br/>

**5) 컴포넌트 분리**

업로드 페이지는 v1에서 단일 페이지로 구성되어 있었습니다. 사용자의 입력을 받는 input필드가 중복되었기 때문에 이를 컴포넌트로 관리하기로 했습니다. input의 text, textarea, select들의 다양한 입력 필드를 동일한 로직으로 사용할 수 있도록 하여 컴포넌트의 재사용성을 향상시켰습니다.

```tsx
// 업로드 페이지의 반복되는 input필드
<div className="mb-8">
  <label className="block text-sm font-medium text-gray-700">상품명</label>
  <input
    type="text"
    value={itemName}
    onChange={(e) => {
      setItemName(e.target.value);
    }}
    className="mt-1 block w-full border-gray-300 rounded-md shadow-sm"
    placeholder="상품명을 입력하세요"
  />
</div>
```

<br/>

- FormInput컴포넌트

```tsx
// 업로드 페이지에서 컴포넌트 사용
<FormInput
  label="상품명"
  type="text"
  name="productName"
  value={usedProducts.productName}
  onChange={onChangeInput}
  placeholder="상품명을 입력하세요"
/>;

// FormInput컴포넌트 ( input의 type에 따라 다른 렌더링 )
interface FormInputProps {
  label: string;
  type: "text" | "number" | "textarea" | "select" | "radio";
  name: string;
  value: string | number | boolean;
  options?: string[]; // select나 radio에 대한 옵션
  onChange: (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
    >
  ) => void;
  placeholder?: string;
  min?: number;
  step?: number;
}

export const FormInput = ({
  label,
  type,
  name,
  value,
  onChange,
  options = [],
  placeholder = "",
  min = 0,
  step = 0,
}: FormInputProps) => {
  return (
    <div className="mb-8">
      <label>{label}</label>
      {type === "textarea" ? (
        <textarea
          name={name}
          value={value as string}
          onChange={onChange}
          className="h-[200px] w-full mt-1 block resize-none border border-gray-300 rounded-md p-4 focus:outline-none"
          placeholder={placeholder}
        />
      ) : type === "select" ? (
        <select
          name={name}
          value={value as string}
          onChange={onChange}
          className="border p-2"
        >
          {options.map((option) => (
            <option key={option} value={option}>
              {option}
            </option>
          ))}
        </select>
      ) : (
        <input
          type={type}
          name={name}
          value={value as string}
          onChange={onChange}
          className="w-full p-2 block text-lg border rounded shadow-sm"
          placeholder={placeholder}
          min={min}
          step={step}
        />
      )}
    </div>
  );
};
```

<br/>
<br/>

### 🩷결론 : 고민할 수록 코드는 발전하고 자란다

V2에서의 개선 사항은 단순히 코드의 간결함뿐만 아니라 유지보수성과 사용자 경험 측면에서도 크게 기여했습니다. 특히, **컴포넌트 분리와 상태 관리의 일원화** 덕분에 코드가 훨씬 직관적이 되고, 새로운 기능을 추가하거나 수정할 때 더 빠르고 쉽게 작업할 수 있었습니다.

| **기능**           | **V1**                 | **V2**                           |
| ------------------ | ---------------------- | -------------------------------- |
| **이미지 처리**    | 미리보기와 업로드 통합 | 미리보기와 업로드 분리           |
| **상태 관리**      | 개별 상태 관리         | 객체로 상태 통합                 |
| **입력 검증**      | 없음                   | 필수 값 검증 로직 추가           |
| **로딩, 에러상태** | tty-catch 에러만 확인  | 로딩상태, 에러상태에 따라 UI구성 |
| **컴포넌트 구조**  | 단일 페이지            | 이미지와 입력 필드 컴포넌트 분리 |

프로젝트를 개선하는 과정에서 많은 시행착오를 겪었지만, 그만큼 배운 것도 많았습니다. **더 나은 코드 구조와 데이터 처리 방식을 고민하고, 사용자가 겪을 수 있는 문제를 미리 예측하는 과정**에서 개발자로서의 자질에 한발 더 가까이 가지 않았을까 생각해봅니다.

앞으로도 **더 나은 사용자 경험과 코드 품질을 위해 끊임없이 고민하고 성장하는 개발자가 되고 싶습니다!** 이 글을 읽는 독자들도 저의 고민과 성장 과정을 통해 많은 영감을 받았으면 좋겠습니다.
