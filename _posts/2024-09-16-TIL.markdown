---
layout: post
title: "댓글을 제품에서 탈출시키다: Geekchic v2의 댓글 독립 선언!"
date: 2024-09-16 13:16:03 +0900
categories: jekyll update
---

### 😁댓글을 제품에서 탈출시키다: Geekchic v2의 댓글 독립 선언!

개발을 하다 보면 예상치 못한 곳에서 데이터 구조의 한계를 마주할 때가 있습니다. 처음엔 모든 데이터를 한 곳에 묶어놓으면 편리할 것 같았지만, 프로젝트가 커질수록 유지보수나 성능 최적화에서 큰 문제로 다가옵니다.

<img src='/images/2-11-hinata.png' alt='시작하기' style="margin: 20px 0"/>

저는 중고 거래 플랫폼인 Geekchic 프로젝트를 진행하면서 **v1에서 댓글 기능을 제품 데이터에 통합하는 방식을 선택했습니다.** 당시에는 이 방식이 간단하고 효율적일 거라 생각했지만, 프로젝트가 점점 복잡해지면서 데이터 처리에 비효율성을 느끼기 시작했습니다. 특히, 불필요한 데이터 로딩으로 인해 성능 저하를 경험했고, 유지보수 역시 어려워졌습니다.

개발자라면 아마 저와 비슷한 경험을 해보셨을 겁니다. 처음엔 빠르게 개발하는 것이 목표였다가, 점점 쌓이는 복잡한 코드와 데이터를 보며 개선이 필요하다는 생각이 들죠. 저 역시 그런 고민 끝에 v2로 리팩토링을 결심했습니다. 이번 포스팅에서는 **댓글을 독립된 테이블로 분리**하여 성능 최적화와 관리의 편리함을 얻은 과정을 공유하려고 합니다. **React-query**와 **Mutation**을 통해 상태 관리를 어떻게 개선했는지도 함께 다뤄보겠습니다.
<br/>
<br/>

### 😒v1에서의 문제점

v1에서는 댓글 데이터가 제품 정보와 함께 `products` 테이블에 저장되어 있었습니다. 이를 통해 제품 페이지를 불러올 때, 댓글 정보 역시 제품과 함께 불러와야 했습니다. 이 구조는 댓글을 추가하거나 수정할 때, 불필요한 데이터까지 다시 불러와야 하는 비효율성을 초래했습니다.

예시 코드에서 보듯이, <br/>
제품 데이터를 불러올 때 댓글 데이터도 함께 불러와야 했고, 상태 관리도 어려웠습니다.

```tsx
// v1: 중고 상세 페이지에서 제품과 댓글을 함께 불러오는 구조
const UsedDetail = () => {
  const { itemId } = useParams<{ itemId: string }>();
  const { data, isPending, isError } = useQuery({
    queryKey: ["usedDetailItem"],
    queryFn: () => usedDetailItem(itemId as string),
  });

  return (
    <div>
      {isPending ? (
        <p>로딩 중...</p>
      ) : (
        <>
          <ProductDetails data={data} />
          <Comments comments={data.comments} /> {/* 제품과 댓글이 결합된 구조 */}
        </>
      )}
    </div>
  );
};
```

<br/>

댓글을 추가할 때마다 **Mutation**을 사용해 상태를 자동으로 업데이트했지만, <br/>
query-key가 `usedDetailItem`에 묶여 있어 모든 제품 데이터를 다시 불러와야 했습니다.
<br/>이때부터 "댓글을 독립시켜야겠다"는 생각을 하게 되었습니다.

```tsx
const mutation = useMutation({
  mutationFn: async (comments) => {
    await addUsedComment(itemId as string, comments);
  },
  onSuccess: () => {
    queryClient.invalidateQueries(
      {
        queryKey: ["usedDetailItem"], // 댓글을 추가하지만 제품 데이터를 업데이트 함
        refetchType: "active",
        exact: true,
      },
      { throwOnError: true, cancelRefetch: true }
    );
  },
});
```

<br/>
<br/>

### 😁v2에서의 개선: 독립적인 댓글 테이블로 성능 최적화

**v2에서는 댓글 데이터를 독립적인 `usedComment` 테이블로 분리**하여, 제품과 댓글 간의 종속성을 제거했습니다. 이를 통해 댓글은 별도의 API 호출로 관리하게 되었고, 제품 데이터와 분리되어 필요한 때에만 서버와 통신할 수 있게 되었습니다

댓글을 가져오거나 업데이트할 때 **React-query**의 query-key를 `usedComments`로 설정해, 각 제품에 해당하는 댓글만을 효율적으로 불러오도록 최적화했습니다. 이렇게 설계함으로써, 제품 조회 시 불필요한 데이터 로딩을 방지하고, 페이지 전환 시에도 매끄러운 사용자 경험을 제공할 수 있었습니다.

```tsx
// v2: 독립된 댓글 데이터를 가져오는 코드
export const CommentsList = () => {
  const { productId } = useParams<string>();
  const {
    data: comments,
    isPending,
    isError,
  } = useQuery({
    queryKey: ["usedComments", productId],
    queryFn: () => getUsedComment(productId as string),
  });

  return (
    <div>
      {isPending ? (
        <p>로딩 중...</p>
      ) : (
        <>
          <CommentSection comments={comments} />
        </>
      )}
    </div>
  );
};
```

댓글을 독립시킨 후 상태 관리는 훨씬 명확해졌습니다. **useQuery**를 사용해 댓글 데이터를 로딩할 때 `isLoading` 상태를 활용해 로딩 스피너를 보여주고, **isError** 상태로 에러를 처리할 수 있었습니다. 댓글을 추가할 때마다 **Mutation**을 통해 상태가 자동으로 업데이트되면서, 사용자는 새로고침 없이 실시간으로 댓글 변화를 확인할 수 있게 되었습니다.
<br/>
<br/>

### 🤗성능 최적화와 상태 관리의 개선

v2에서는 댓글이 독립적인 데이터로 관리되면서, 성능 최적화뿐 아니라 상태 관리도 훨씬 쉬워졌습니다. **React-query**의 `queryKey`는 이제 제품 데이터와 별도로 댓글만을 처리할 수 있게 되었고, 그 결과 불필요한 데이터를 함께 가져오는 일이 사라졌습니다.

또한, 댓글 추가, 수정, 삭제 등의 작업은 각각 **Mutation**을 사용해 서버와 통신하고, 그 즉시 상태를 갱신하여 실시간으로 변화를 반영했습니다.

```tsx
const editCommentMutation = useMutation({
  mutationFn: async ({ productId, commentId, editCommentData }) => {
    await editUsedComment({ productId, commentId, editCommentData });
  },
  onSuccess: () => {
    queryClient.invalidateQueries(["usedComments", productId]); // 독립된 댓글 상태 갱신
  },
});
```

이와 같은 방식은 특히 사용자 경험(UX)에 큰 변화를 가져왔습니다. 페이지 새로고침 없이도 댓글이 실시간으로 업데이트되었고, 각 상태가 독립적으로 관리되면서 유지보수도 용이해졌습니다.
<br/>
<br/>

### 🩷결론

**v1에서의 문제**를 해결하기 위해 진행한 이번 리팩토링은, 단순히 성능을 개선하는 데 그치지 않았습니다. 댓글 데이터를 제품에서 분리함으로써 유지보수와 관리가 훨씬 수월해졌으며, 서버 자원을 효율적으로 활용할 수 있었습니다.

이 과정을 겪으며 느낀 점은, 개발의 재미는 결국 이런 고민을 코드로 풀어내고 그 결과를 확인할 수 있다는 데 있는 것 같습니다. 고민한 만큼 코드가 간결해지고, 성능이 향상되는 모습을 볼 때, 개발이 정말 즐겁다고 느낍니다!

개발 과정은 마치 퍼즐을 맞추는 것처럼, 문제를 해결할 때마다 성취감을 느끼게 합니다. 이번 개선을 통해 성능은 물론이고, 유지보수성까지 고려한 프로젝트로 성장할 수 있었음을 자랑스럽게 생각합니다.
