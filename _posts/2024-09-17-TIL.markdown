---
layout: post
title: "쪽지 보내기 기능하나에 이렇게 많은 고민이??"
date: 2024-09-17 13:00:00 +0900
categories: jekyll update
---

### 😁쪽지 보내기 기능하나에 이렇게 많은 고민이?? <br/> Firebase와 React로 쪽지 기능 완성하기

개발자라면, 작은 기능 하나를 구현할 때도 예상보다 많은 고민이 필요하다는 걸 경험해 보셨을 겁니다. 이번 포스팅에서는 중고거래 플랫폼에서 **쪽지 보내기 기능**을 구현하면서 겪은 고민과 해결 과정을 공유하려 합니다.

중고 거래 플랫폼에서 구매자와 판매자가 자유롭게 대화할 수 있는 쪽지 보내기 기능은 단순해 보이지만, 상태 관리와 데이터베이스 구조 설계에 많은 고민이 필요했습니다. 특히 **사용자 관점**에서의 플로우와 이를 **시스템 동작**에 맞게 구현하는 과정에서 많은 시행착오가 있었습니다.

<img src='/images/2-8-bokuto8.png' alt='시작하기' style="margin: 20px 0"/>

### 🩷1. 쪽지 보내기 기능 설계 과정

쪽지 보내기 기능은 구매자와 판매자가 서로 메시지를 주고받는 기본적인 소통 창구입니다. 하지만 로그인한 유저의 역할과 이전 쪽지 여부에 따라 버튼이 달라져야 하는 로직은 꽤 복잡했습니다. 

처음 쪽지 보내기 기능을 개발할 때, 무작정 ‘쪽지 보내기’라는 기능에만 집중해 **유저 플로우**에 대해 깊게 생각하지 않았습니다. 그 결과, 기능은 완성했지만 덕지덕지 붙여진 코드와 중복된 로직이 많았습니다.

그래서 v2에서는 처음부터 유저 플로우를 충분히 고려한 뒤, 보다 체계적으로 개발을 진행했습니다.<br/>
**사용자 관점의 플로우**는 다음과 같습니다: <br/>

<img src='/images/0917_flow.png' alt='시작하기' style="margin: 10px auto; display:block; width: 400px"/>

- 로그인한 사용자가 **판매자**라면, '쪽지 보내기' 버튼은 숨기고
- **구매자**라면 '쪽지 보내기' 버튼이 나타납니다.
- 이전에 해당 제품에 대한 대화가 있었다면, 버튼 문구가 '쪽지 이어하기'로 변경됩니다.
- 버튼을 클릭하면 쪽지 페이지로 이동하고, 이 페이지에서는 판매자, 구매자, 제품 정보 및 대화 내용이 표시됩니다.

이처럼 UI에서 보이는 부분을 먼저 구상한 후, 시스템적으로 이 흐름을 어떻게 처리할지 고민했습니다. 시스템 동작은 다음과 같은 구조를 따랐습니다

| **사용자 플로우**                           | **시스템 플로우**                                                      |
| ------------------------------------------- | ---------------------------------------------------------------------- |
| - 구매자일 경우 '쪽지 보내기' 버튼 노출     | 구매자/판매자 여부 확인 후 버튼 노출 결정                              |
| - 이전 대화가 있다면 '쪽지 이어하기'로 변경 | 쪽지 데이터 여부 확인 후, 버튼 문구를 동적으로 변경                    |
| - 버튼 클릭 시 쪽지 페이지 이동             | 클릭 시 `messageId` 생성 후 URL 이동 및 DB 저장 (이전 쪽지 없는 경우 ) |

<br/>

### 🩷2. Firebase 테이블 구조 및 API 설계

**(1-1) v1 messages db구조 및 데이터 저장**
- 쪽지 보내기 버튼 클릭시 쪽지방이 생성되는데, 이때 판매/구매자/제품의 정보를 함께 db에 저장했습니다. 그래서 유저나 제품 정보가 업데이트 되었을 경우에 **업데이트 된 내용을 반영하기 어려움**이 있었습니다.

```tsx
// v1에서의 쪽지 데이터 저장 방식 ( 관련 데이터 모두 저장 )
 const onClickAddMessagePage = async () => {
    const messageId = uuidv4();
    if (!currentMessage) {
      const messageData: MessagesType = {
        messageId: messageId,
        itemId,
        ... // 제품 정보 데이터 ,
        seller : { // 판매자 정보 데이터 }
        buyer : { // 구매자 정보 데이터 }
        salesStatus: "initialization",
      };
      await addUsedMessagePage(messageData);
    }
    navigate(`/message/${itemId}/${userId}`, { state: { // 메세지 페이지에서 보여질 데이터들 },
    });
  };
```
<br/>

- v1에서는 messages의 내용을 userData에 저장해놨기 때문에 **구매자와 판매자 모두에게 메세지를 저장**해야 했습니다. 이는 데이터 중복과 비효율적인 관리 문제를 일으켰습니다.

```tsx
// 쪽지 페이지 생성 => 판매자, 구매자모두 같은 데이터 저장
export async function addUsedMessagePage(messageData: MessagesType) {
  const { seller, buyer, messageId } = messageData;
  try {
    const updates = {
      [`/userData/${seller.sellerId}/messages/${messageId}`]: messageData,
      [`/userData/${buyer.userId}/messages/${messageId}`]: messageData,
    };
    await update(ref(database), updates);
  } catch (err) {
    console.error("메세지 생성 에러", err);
  }
}
```
<br/>

**(1- 2) v2 messages db구조 및 데이터 저장**<br/>
- 위와 같은 구조는 관리하기에 너무 복잡했기에, v2에서는 **데이터 분리**와 **최적화**에 중점을 두었습니다. 먼저 usedMessages 라는 데이터 테이블을 따로 생성하여 유저 데이터와 messages를 분리하였습니다.


- 쪽지 페이지에서 판매자 / 구매자 / 제품 정보는 id로만 저장하여 별도의 API요청으로 불러오는 방식을 선택하였습니다. 이를 통해 쪽지 보내기 페이지에서는 최신 데이터를 보장할 수 있게 되었습니다.

```tsx
// v2에서의 쪽지 데이터 저장 방식 ( 관련 id만 저장 )
const onClickAddMessage = async () => {
  const messageId = uuidv4();
  if (previousMessage === null) {
    const messageData = {
      messageId,
      productId,
      sellerId: usedProduct.seller._id,
      buyerId: isLoginUser._id,
      createdAt: utcToKoreaTimes(),
    };
    await addMessagesPage(messageData); // 데이터 중복 없이 저장
  }
  navigate(`/message/${productId}/${messageId}`);
};
```

```tsx
// 쪽지 페이지 생성 => usedMessages테이블에 저장 => 유저는 messageId만 저장해 두면 됨
export const addMessagesPage = async (messageData: MessageType) => {
  try {
    const getUserMessageList = async (userId: string) => {
      const snapshot = await get(ref(database, `users/${userId}`));
      if (snapshot.exists()) {
        const userData = snapshot.val();
        return userData.listMessages || [];
      }
      return [];
    };

    // 판매자와 구매자의 기존 메시지 목록 가져오기
    const sellerPrevMessages = await getUserMessageList(messageData.sellerId);
    const buyerPrevMessages = await getUserMessageList(messageData.buyerId);

    // 판매자와 구매자의 메시지에 새 메시지ID 추가
    const sellerUpdatedMessages = [
      ...sellerPrevMessages,
      messageData.messageId,
    ];
    const buyerUpdatedMessages = [...buyerPrevMessages, messageData.messageId];

    const updates = {
      [`usedMessages/${messageData.messageId}`]: { ...messageData },
      [`users/${messageData.sellerId}/listMessages`]: sellerUpdatedMessages,
      [`users/${messageData.buyerId}/listMessages`]: buyerUpdatedMessages,
    };
    console.log("쪽지 페이지 생성 성공");
    await update(ref(database), updates);
  } catch (error) {
    console.error("쪽지 페이지 생성실패", error);
  }
};
```

이렇게 Firebase 테이블 구조를 개선한 덕분에 데이터 중복 문제를 해결했고, 필요한 데이터만 효율적으로 가져오는 구조로 만들 수 있었습니다. 
<br/>
<br/>


### 🩷3. 로딩 상태 관리 UI 개선

유저가 상세페이지로 들어왔을 때, 해당 제품에 대한 쪽지가 있었다면, 쪽지 보내기 버튼 문구가 '쪽지 이어하기'로 변경되는 기능을 구현했었습니다. 이 때, 쪽지 여부를 확인하는 동안 시간이 걸려 페이지 렌더링 후에 문구가 변경되는 문제가 발생했습니다.

이를 개선하기 위해 `isLoadingMessage`라는 상태를 추가하고, 메시지 데이터를 확인하는 동안 로딩 중임을 나타내었습니다.

이 과정을 통해 버튼 문구가 뒤늦게 변경되는 문제를 해결하고, 페이지가 처음 로드될 때는 로딩 스피너를 표시함으로써 사용자가 불편함을 느끼지 않도록 UI를 더욱 매끄럽게 만들었습니다.

```tsx
export const UsedProductsDetail = () => {
  const [isLoadingMessage, setIsLoadingMessage] = useState(true);

  useEffect(() => {
    const checkPreviousMessage = async () => {
      const result = await checkMessage({
        buyerId: isLoginUser._id,
        productId: productId as string,
      });
      if (result !== null) setPreviousMessage(result);
      setIsLoadingMessage(false);
    };
    checkPreviousMessage();
  }, []);

  return (
    <>
      {buyer &&
        (!isLoadingMessage ? (
          <button onClick={onClickAddMessage} className="p-2 border">
            {previousMessage !== null ? "쪽지 이어하기" : "쪽지 보내기"}
          </button>
        ) : (
          <LoadingSpinner size="4" />
        ))}
    </>
  );
};
```
<br/>

### 🩷느낀점

이번 쪽지 보내기 기능을 구현하면서 단순히 기능을 만드는 것이 아니라, **사용자와 시스템의 동작 흐름을 모두 고려해야 한다는 것을 깨달았습니다.** Firebase 데이터베이스 구조를 효율적으로 재설계하고, URL 구조 변경과 로딩 상태 관리를 통해 사용자 경험을 최적화한 점은 큰 성과였습니다.

처음에는 단순해 보였던 기능이었지만, **하나하나 뜯어보며 개발하는 과정이 즐거웠고, 리팩토링을 통해 더 나은 방향으로 발전시킬 수 있었습니다.** 앞으로도 이러한 고민과 시도를 바탕으로 더 나은 개발자가 되기 위해 노력할 것입니다.
